package consoleIO;

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This class gets input from the user. It handles possible bad input from the user
 * 
 * @version 1.1
 * @since 2018/11/13
 * @author Jason
 *
 */
public class ConsoleInputInterface
{
	public static final Scanner consoleScanner = new Scanner(System.in);
	
	/**
	 * This method keeps prompting the user to enter a positive integer input till the user enters a positive integer.
	 * It then returns the positive integer.
	 * 
	 * @param promptMessage
	 * @return userInput
	 */
	public static int getUserPositiveIntInput(String promptMessage)
	{
		int userInput = 0;
		
		do
		{
			System.out.print(promptMessage);
			
			if(consoleScanner.hasNextInt())
			{
				userInput = consoleScanner.nextInt();
				consoleScanner.nextLine(); // read in the newline char generated by pressing 'Enter'
			}
			
		} while(userInput < 1); 
		
		return userInput;
	}
	
	/**
	 * This method keeps prompting the user to enter a positive integer input 
	 * till the user enters a positive integer that is lower than the upperbound.
	 * 
	 * Either the prompting message or an earlier message
	 * should make it clear to the user what the upperbound is.
	 * 
	 * This method then returns the positive integer.
	 * 
	 * @param promptMessage
	 * @return userInput
	 */
	public static int getUserPositiveIntInput(String promptMessage, int upperbound)
	{
		int userInput = 0;
		
		do
		{
			System.out.print(promptMessage);
			
			if(consoleScanner.hasNextInt())
			{
				userInput = consoleScanner.nextInt();
				consoleScanner.nextLine(); // read in the newline char generated by pressing 'Enter'
			}
			
		} while(userInput < 1 || userInput > upperbound);
		
		return userInput;
	}
	
	/**
	 * This method keeps prompting the user to enter a Yes or No till the user enters Y or N.
	 * 
	 * Either the prompting message or an earlier message
	 * should make it clear to the user what characters are legal to enter (Y, y ,N, n).
	 * 
	 * This method then returns the boolean value (Yes -> true, No -> false).
	 * 
	 * @param promptMessage
	 * @return userInput
	 */
	public static boolean getUserBooleanInput(String promptMessage)
	{
		char userInput = '\0';
		
		do
		{
			System.out.print(promptMessage);
			
			if(consoleScanner.hasNext())
			{
				userInput = consoleScanner.nextLine().charAt(0);
			}
			
		} while(userInput != 'Y' || userInput != 'y' || userInput != 'N' || userInput != 'n');
		
		return (userInput == 'Y' || userInput == 'y');
	}
	
	/**
	 * This method keeps prompting the user to enter a String of the right format till the user do so.
	 * 
	 * This method then returns the String entered.
	 * 
	 * @param promptMessage, stringFormatType
	 * @return userInput
	 */
	public static String getUserStringInput(String promptMessage, int stringFormatType)
	{
		String userInput;
		
		boolean isFormatCorrect = false;
		do
		{
			System.out.println(promptMessage);
			userInput = consoleScanner.nextLine();
			
			isFormatCorrect = checkInput(userInput,stringFormatType);
			
			if(!isFormatCorrect)
			{
				if(stringFormatType == 1)
					System.out.println("Error! Please enter only letters and spaces.");
				else
					System.out.println("Error! Please enter only letters and digits.");
			}
		} while(!isFormatCorrect);
		
		return userInput;
	}
	private static boolean checkInput(String input, int stringFormatType)
	{
		boolean stringMatch = false;
		// Check letters and whitespace
		if (stringFormatType == 1)
		{
			Pattern p = Pattern.compile("^[ A-Za-z]+$");
			Matcher m = p.matcher(input);
			stringMatch = m.matches();
		}
		// Check letters and digits
		else if (stringFormatType == 2)
		{
			Pattern p2 = Pattern.compile("^[A-Za-z0-9]+$");
			Matcher m2 = p2.matcher(input);
			stringMatch = m2.matches();
		}
		return stringMatch;
	}
}
